# FILE:            api/XZ/HXL-Proxy/eng/openapi.yaml
# LICENSE:         Unlicense
#
# ONLINE VERSION:  https://editor.swagger.io/?url=https://hapi.etica.ai/api/XZ/HXL-Proxy/eng/openapi.yaml
#
# README FIRST!:   This file uses OpenAPI syntax (https://www.openapis.org/),
#                  a de facto non-proprietary industry standard to document
#                  APIs.
#                  Consider as starting point:
#                    - Use this online editor https://editor.swagger.io/
#                    - Check this https://openapi.tools/ for compatible tools

openapi: 3.0.3
# NOTE: the current file, as 2021-05-01, uses OpenAPI 3.0 because 3.1 still too
#       new (released 2021-02-15). But some comments already consider future
#       upgrade.
# @see https://spec.openapis.org/oas/v3.0.3
# @see https://spec.openapis.org/oas/v3.1.0

info:
  title: HXL-Proxy
  description: >
    Note: the HXL-proxy, strictly speaking, is intended to be used as human
    interface, not as REST API. So even if this OpenAPI go beyond draft, is
    unlikely that will be as relevant as the official documentation at
    https://github.com/HXLStandard/hxl-proxy/wiki.

    BUT the documentation for API usage is at
    https://github.com/HXLStandard/hxl-proxy/wiki/API.

  version: "3" # 3 because CKAN uses 3, see https://docs.ckan.org/en/2.9/api/
  termsOfService: https://data.humdata.org/about/terms
  license:
    name: Several license types
    url: https://data.humdata.org/about/license
    # TODO: while OpenAPI 3.0 don't enforce SPDX https://spdx.org/licenses/
    #       the OpenAPI 3.1 recommends/requires SPDX. So this will need ajusts
  contact:
    name: HXLStandard (Mail list, GitHub Issues)
    url: https://github.com/HXLStandard/hxl-proxy/issues
    email: hxlproject@googlegroups.com
    # https://groups.google.com/g/hxlproject

servers:
  - url: https://proxy.hxlstandard.org
    description: HXLStandard production server
  - url: http://beta.proxy.hxlstandard.org/
    description: HXLStandard beta server (no HTTPS)
  - url: http://localhost:5000
    description: HXL-proxy localhost docker
    # https://github.com/HXLStandard/hxl-proxy/blob/master/docker_files/docker-compose.yml

# paths: {}
paths:
  /data.csv:
    get:
      description: |
        Computer programs can use the HXL Proxy as if it were an
        Application programming interface (API).

        There are two basic URL patterns available (substitute a different
        domain if you are using a local copy of the proxy):

        ```
        https://proxy.hxlstandard.org/data.<ext>
        https://proxy.hxlstandard.org/data/download/<basename>.<ext>
        ```
        The ext portion may be either "csv" for
        [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) data, or
        "json" for [JSON](https://en.wikipedia.org/wiki/JSON) data.
        In the second form, you can chose any custom download filename by
        setting the basename appropriately, e.g. "2016-burundi-3w".

        You may optionally also include the form parameters from the
        interactive [Recipe page](https://github.com/HXLStandard/hxl-proxy/wiki/Recipe-page)
        if you wish. The HXL Proxy will read the recipe parameter first,
        then append any form-based filters after it.

        For full documentation, see
        <https://github.com/HXLStandard/hxl-proxy/wiki/API>.

      parameters:
        - in: query
          name: url
          description: >
            URL of the original dataset (see Special URL handling).

            See <https://github.com/HXLStandard/hxl-proxy/wiki/Special-URL-handling>.
          required: true
          schema:
            type: string
            default: "https://hdp.etica.ai/ontologia/codicem/codicem.locum.hxl.csv"

        - in: query
          name: sheet
          description: >
            Zero-based index of the tab to use from an Excel workbook
          required: false
          schema:
            type: integer
            example: 1

      responses:
        '200':
          description: >
            Return a list of the names of the siteâ€™s datasets (packages).

            See also:
              - https://docs.ckan.org/en/2.9/api/#ckan.logic.action.get.package_list
          content:
            text/csv:
              schema:
                type: string
                # example: 

# components:
#   schemas:
#     CkanReply:
#       # From teamdigitale/api-openapi-samples
#       type: object
#       required:
#         - result
#         - success
#         - help
#       properties:
#         success:
#           type: string
#         result:
#           anyOf:
#             - type: object
#             - type: array
#         error:
#           type: object
#         help:
#           type: string
#           format: url
#         status:
#           type: boolean
#           enum:
#             - true
#             - false
