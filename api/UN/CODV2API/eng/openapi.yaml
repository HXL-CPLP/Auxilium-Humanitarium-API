# FILE:            api/UN/CODV2API/eng/openapi.yaml
# LICENSE:         Unlicense
#
# ONLINE VERSION:  https://editor.swagger.io/?url=https://hapi.etica.ai/api/UN/CODV2API/eng/openapi.yaml
#
# README FIRST!:   This file uses OpenAPI syntax (https://www.openapis.org/),
#                  a de facto non-proprietary industry standard to document
#                  APIs.
#                  Consider as starting point:
#                    - Use this online editor https://editor.swagger.io/
#                    - Check this https://openapi.tools/ for compatible tools


openapi: 3.0.3
# NOTE: the current file, as 2021-05-01, uses OpenAPI 3.0 because 3.1 still too
#       new (released 2021-02-15). But some comments already consider future
#       upgrade.
# @see https://spec.openapis.org/oas/v3.0.3
# @see https://spec.openapis.org/oas/v3.1.0

info:
  title: UN OCHA COD Version 2 API (English)
  description: |

    This resource, using [OpenAPI 3.0 specification](https://www.openapis.org/)
    and [dedicated to public domain](https://unlicense.org/), is an
    [HXL-CPLP volunteers user group](https://github.com/HXL-CPLP) initiative
    to document the [COD Version 2 API](https://beta.itos.uga.edu/CODV2API/) in
    Portuguese language. Use of resource (recommended: see
    [Open API Tools](https://openapi.tools/)) to make integrations and
    translations to other natural languages.

    **Important:** HXL-CPLP, translators, volunteers or third-party
    projects using the OpenAPI file are not affiliated with the API providers.
    Use of public domain like licenses (when viable) on derived work is
    encouraged.

    ## About the API

    The API is built for humanitarian information management. Some
    [UN OCHA](https://www.unocha.org/) activities are encapsulated in this
    tool with respect to Common Operational Datasets maintenance.
    Find metadata and location information and gazeteer type output for the
    CODs compatible for applications and for visualizations.
    The scope of the data varies but comprises enhanced CODs processed in
    OCHA workflows for roughly 50 countries (as shown in the
    [COD dashboard](https://cod.unocha.org/)) in the humanitarian support
    sphere. For more information see the
    [About page](https://beta.itos.uga.edu/CODV2API/Home/About).
    Enjoy and comments welcome at ocha-fis-data@un.org.

    ## What are CODs?
    Common Operational Datasets (CODs) are authoritative reference datasets
    needed to support operations and decision-making for all actors in a
    humanitarian response. CODs are 'best available' datasets that ensure
    consistency and simplify the discovery and exchange of key data for the
    humanitarian community.

  version: "2"

  # termsOfService copied from "Privacy" link at https://beta.itos.uga.edu/CODV2API/Home/About
  termsOfService: https://eits.uga.edu/access_and_security/infosec/pols_regs/policies/privacy/
  license:
    name: Several license types
    url: https://data.humdata.org/about/license
  contact:
    name: OCHA Field Information Services
    url: https://data.humdata.org/user/ocha-fis-data
    email: ocha-fis-data@un.org

servers:
  - url: https://beta.itos.uga.edu/CODV2API/api/v1
    description: COD Version 2 API production server

tags:
 - name: "COD API"
   description: |
      **COD API Metadata, Downloads, Services and General**.
      Themes for the COD at the system level.
      For instance, Administrative Boundary or Population Statistics

 - name: Themes
   description: |
      Themes for the COD at the system level.
      For instance, Administrative Boundary or Population Statistics

 - name: Versions
   description: |
      Version for the COD at the country level.

 - name: Lookup
   description: |
      Look up for the COD contents at the system level.
      JSON results are returned in what are commonly refererred to as
      Gazeteer format.


# NOTE: for maintainers, the Team Digitale have a few references about OpenAPI
#       and CKAN. For example, the file
# https://github.com/teamdigitale/api-openapi-samples/blob/master/external-apis/api.daf.teamdigitale.it.yaml.src
paths:

  # NOTE: the will not be documented here
  # /current:

  /locations:
    get:
      tags: [ "COD API" ]
      # description: >
      #   List available locations(with metadata about each such as preferred name,
      #   iso codes, etc.) and lists of themes available in each location Returns:
      #   location name, iso_3, themes
      responses:
        '200':
          description: >
            List available locations(with metadata about each such as preferred
            name, iso codes, etc.) and lists of themes available in each
            location Returns: location name, iso_3, themes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMetadataReply'

  /locations/{pCode}:
    parameters:
      - $ref: '#/components/parameters/pCodePathParam'

    get:
      tags: [ "COD API" ]
      # description: >
      #   List available locations(with metadata about each such as preferred name,
      #   iso codes, etc.) and lists of themes available in each location Returns:
      #   location name, iso_3, themes

      responses:
        '200':
          description: >
            List available locations(with metadata about each such as preferred
            name, iso codes, etc.) and lists of themes available in each
            location Returns: location name, iso_3, themes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMetadataReply'
        '500':
          $ref: '#/components/schemas/Error500GenericReply'

  # TODO: this endpint needs testing
  # TODO: this endpint needs documentation
  /themes/cod-ab/locations/{pCode}/versions/current:
    parameters:
      - $ref: '#/components/parameters/pCodePathParam'
    get:
      tags: [ "COD API" ]
      responses:
        '200':
          description: >
            List available locations(with metadata about each such as preferred
            name, iso codes, etc.) and lists of themes available in each
            location Returns: location name, iso_3, themes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMetadataReply'
        '500':
          $ref: '#/components/schemas/Error500GenericReply'

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-locations-pCode-versions-versionId
  /themes/cod-ab/locations/{pCode}/versions/{versionId}:
    parameters:
      - $ref: '#/components/parameters/pCodePathParam'
      - $ref: '#/components/parameters/versionIdPathParam'
    get:
      tags: [ "COD API" ]
      responses:
        '200':
          description: >
            Provides metadata about a specific COD-AB version (number of
            levels, level names, notes about levels, number of units within
            each level, availability of geometry, version dates, etc.) with
            URLs to various downloadables and services.

            example: /api/v1/themes/cod-ab/locations/GUI/versions/0.4
          content:
            application/json:
              # TODO: add exact response type
              schema:
                type: string
        '500':
          $ref: '#/components/schemas/Error500GenericReply'

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-locations-pCode
  /themes/cod-ab/locations/{pCode}:
    parameters:
      - $ref: '#/components/parameters/pCodeNeedsFixPathParam'
    get:
      tags: [ "COD API" ]
      responses:
        '200':
          description: >
            Provides metadata about all COD-AB versions at a location
            ( input iso location returns admin0 pcode, name, version number,
            valid_from and valid_to with comments). The parameter takes unique
            location identfier which is a string data type.
            An /api/v1/themes/cod-ab/locations/sdn/

            example: /api/v1/themes/cod-ab/locations/sdn/ JSON
          content:
            application/json:
              # TODO: add exact response schema type (see example)
              schema:
                type: string
              example:
                {
                  "AllVersionsAtLocation": [
                    {
                      "admin0Pcode": "sdn",
                      "admin0Name_ref": " Sudan",
                      "version": "Latest",
                      "valid_from": "2020-08-31T00:00:00",
                      "valid_to": "2021-08-31T00:00:00",
                      "comments": null
                    },
                    {
                      "admin0Pcode": "sdn",
                      "admin0Name_ref": " Sudan",
                      "version": "Latest",
                      "valid_from": "2020-08-31T00:00:00",
                      "valid_to": "2021-08-31T00:00:00",
                      "comments": null
                    }
                  ]
                }
        '500':
          $ref: '#/components/schemas/Error500GenericReply'
  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-locations-pCode-versions-current-level-z-x-y.pbf
  
  # TODO: discover some z b y that would allow test the result.
  /themes/cod-ab/locations/{pCode}/versions/current/{level}/{z}/{x}/{y}.pbf:
    parameters:
      - $ref: '#/components/parameters/pCodeNeedsFixPathParam'
      - name: "level"
        in: path
        description: "Individual level (1 of 0-n)"
        required: true
        schema:
          type: string
        example: "1"
      - name: "z"
        in: path
        description: "(FIXME: add description)"
        required: true
        schema:
          type: string
        example: "1"
      - name: "x"
        in: path
        description: "(FIXME: add description)"
        required: true
        schema:
          type: string
        example: "1"
      - name: "y"
        in: path
        description: "(FIXME: add description)"
        required: true
        schema:
          type: string
        example: "1"
    get:
      tags: [ "COD API" ]
      responses:
        '200':
          description: >
            Retrieve the vector tiles in protobuf (.pbf) format for input
            country (Pcode) and individual level ( 1 of 0-n). pbf

          content:
            application/json:
              # TODO: add exact response schema type (see example)
              schema:
                type: string
        '500':
          $ref: '#/components/schemas/Error500GenericReply'

        # FIXME: the https://beta.itos.uga.edu/CODV2API/api/v1/themes/cod-ab/locations/SDN/versions/current/1/1/1/1.pbf
        #        return 200 OK (not something like HTTP/1.1 400 Bad Request)
        #        and it's content is text/html, not someting like JSON.
        #            HTTP/1.1 200 OK
        #            Content-Type: text/html; charset=utf-8
        #      
        #            Cannot GET /services/postgis/sdn_adm1/wkb_geometry/vector-tiles/1/1/1.pbf?fields=admin0name_en,admin0pcode,admin1name_en,admin1pcode

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-locations-pCode-versions-current-format-level
  /themes/cod-ab/locations/{pCode}/versions/current/{format}/{level}:
    parameters:
      - $ref: '#/components/parameters/pCodeNeedsFixPathParam'
      - $ref: '#/components/parameters/formatParam'
      - $ref: '#/components/parameters/levelParam'
    get:
      tags: [ "COD API" ]
      responses:
        '200':
          description: >
            Downloads of COD data in various formats for current versions of COD Countries

            - {pCode} example: SYR
              - For a list of country pCode(s) available for administrative
                boundaries: check out the themes results from the api:
                /themes
            - {level} example: 2
              - For levels, check out the list of levels available for each
                COD country: at /themes/cod-ab/locations/SYR/versions/current
            - {format} examples: SHP, vectortiles, Geodatabase, Geoservice, XLSX, CSV, geoJSON
              - Note that shapefiles ("SHP" format) are downloaded for all
                levels (administrative boundary designations) since they are
                packaged that way. However Vector tiles,
              - NEW!!!! are downloaded for the respective level as they are
                available. For the list of available vector tiles, check out the
                github and search for the .mbtiles term or column in the
                spreadsheet: [service deployment status](https://github.com/UGA-ITOSHumanitarianGIS/mapservicedoc/blob/master/Data/AWSDeploymentURLlist.xlsx).

            FIXME 2021-05-04 07:53 UTC:
            - This does not work "geoJSON"
              - https://beta.itos.uga.edu/CODV2API/api/v1/themes/cod-ab/locations/SYR/versions/current/geoJSON/2
            - This works "json"
              - https://beta.itos.uga.edu/CODV2API/api/v1/themes/cod-ab/locations/SYR/versions/current/json/2

            TODO: 2021-05-05 07:57 UTC:
             - Document an example using getJSON / TopoJSON. use as references
               - https://github.com/topojson/topojson-specification
               - https://tools.ietf.org/html/rfc7946

          content:
            # application/json:
            #   # TODO: add exact response type
            #   schema:
            #     type: string

            ## GeoJSON _________________________________________________________
            # RFC: The GeoJSON Format
            # https://tools.ietf.org/html/rfc7946#section-12
            # https://github.com/DataCurationNetwork/data-primers/issues/16
            application/geo+json:
              # TODO: add exact response type
              schema:
                type: string

            ## XLSX ____________________________________________________________
            # https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary

            ### Vectortiles ____________________________________________________
            # - https://en.wikipedia.org/wiki/Vector_tiles
            # - https://github.com/mapbox/vector-tile-spec
            #   - https://github.com/mapbox/vector-tile-spec/blob/master/2.1/README.md#22-multipurpose-internet-mail-extensions-mime
            application/vnd.mapbox-vector-tile:
              schema:
                type: string
                format: binary

            ### SHP ____________________________________________________________
            # - https://en.wikipedia.org/wiki/Shapefile
            #   - Wikipedia says:
            #     - "x-gis/x-shapefile"
            # - https://www.iana.org/assignments/media-types/media-types.xhtml
            #   - IANA says:
            #     - "application/vnd.shp"
            #       - https://www.iana.org/assignments/media-types/application/vnd.shp
            #     - "application/vnd.shx"
            #       - https://www.iana.org/assignments/media-types/application/vnd.shx
            #     - "application/vnd.dbf"
            #       - https://www.iana.org/assignments/media-types/application/vnd.dbf
            application/vnd.shp:
              schema:
                type: string
                format: binary

            ### CSV ____________________________________________________________
            # - https://tools.ietf.org/html/rfc4180
            text/csv:
              schema:
                type: string

            ### Geodatabase ____________________________________________________
            # TODO: Geodatabase (review)
            # - https://community.esri.com/t5/arcgis-runtime-sdk-for-qt/attachment-content-type-is-incorrect-when-adding-to/td-p/593526
            # - https://www.digipres.org/formats/mime-types/#text/xml
            # - https://www.digipres.org/formats/sources/fdd/formats/#fdd000295
            text/xml:
              schema:
                type: string

            ### Geoservice _____________________________________________________
            # TODO: review Geoservice. But seems that is a redirection to
            #       ArcGIS, like
            #       - https://beta.itos.uga.edu/CODV2API/api/v1/themes/cod-ab/locations/SYR/versions/current/geoservice/2
            #         - https://gistmaps.itos.uga.edu/arcgis/rest/services/V00_0/SYR_pcode/MapServer


        '500':
          $ref: '#/components/schemas/Error500GenericReply'

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-Themes
  # NOTE: Changed from "themes" to "/themes"
  /themes:
    get:
      tags: [ "Themes" ]
      responses:
        '200':
          description: >
            Retrieve Theme information in the system.
          content:
            application/json:
              schema:
                type: string
                # TODO: Create specific schema

              example:
                [
                  {
                    "theme_name": "Administrative Boundary",
                    "comment": "",
                    "countries": [
                      "mli",
                      "per",
                      "",
                      "kdn",
                      "tls",
                    ],
                    "Total": 157
                  },
                  {
                    "theme_name": "Population Statistics",
                    "comment": "",
                    "countries": [
                      "ton",
                      "ecu",
                      "bgd",
                      "tha",
                      "ssd",
                    ],
                    "Total": 5
                  }
                ]
  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-themeId
  # FIXME (2021-05-04 08:50 UTC):
  #   This entrypoint is returning not countries at all at this moment.
  #   (but is returning something)
  /themes/{themeId}:
    parameters:
      - $ref: '#/components/parameters/themeIdParam'
    get:
      tags: [ "Themes" ]
      responses:
        '200':
          description: >
            1 is Administrative Boundary.
            2 is Population Statistics
          content:
            application/json:
              schema:
                type: string
                # TODO: Create specific schema

              example:
                {
                  "theme_name": null,
                  "comment": null,
                  "countries": [],
                  "Total": 0
                }

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-Version-id
  # FIXME: This is returning 404 not found. Needs testing.
  # {
  #   "$id": "1",
  #   "message": "No HTTP resource was found that matches the request URI 'http://beta.itos.uga.edu/CODV2API/api/v1/Version/2'."
  # }
  /Version/{id}:
    parameters:
      - name: id
        in: path
        description: "(TODO: ADD SHORT DESCRIPTION)"
        required: true
        schema:
          type: string
        example: "1"
    get:
      tags: [ "Versions" ]
      responses:
        '200':
          description: >
            Service Level List available versions of the API.
          content:
            application/json:
              # TODO: Create specific schema
              schema:
                type: string

  # https://beta.itos.uga.edu/CODV2API/Areas/HelpPage/Views/Help/~~/Help/Api/GET-api-Versions
  # FIXME: this is returning 404
  /Versions:
    get:
      tags: [ "Versions" ]
      responses:
        '200':
          description: >
            Service Level List available versions of the API.
          content:
            application/json:
              # TODO: Create specific schema
              schema:
                type: string

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-Lookup-latlng-latlong-wkid-level
  /themes/cod-ab/Lookup/latlng/{latlong}/{wkid}/{level}:
    parameters:
      - $ref: '#/components/parameters/latlongParam'
      - $ref: '#/components/parameters/wkidParam'
      - $ref: '#/components/parameters/levelParam'
    get:
      tags: [ "Lookup" ]
      responses:
        '200':
          description: >
            Retrieve location by level and latlng parameter with wkid units
            meters and World Mercator projection. If no levels are entered,
            all levels are returned. If no version is specified, the current
            version is returned.
            
            Returns: Names and Pcodes
          content:
            application/json:
              # TODO: Create specific schema
              schema:
                type: string

              example:
                [
                  {
                    "admin0Name_ref": "Null",
                    "admin0Pcode": "BF",
                    "admin0Name_local": "Burkina Faso",
                    "admin1Name_ref": "Null",
                    "admin1Pcode": "BF50",
                    "admin1Name_local": "Centre-Ouest",
                    "admin2Name_ref": "Null",
                    "admin2Pcode": "BF5001",
                    "admin2Name_local": "Boulkiemdé",
                    "status": "OK"
                  }
                ]

  # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-lookup-level-iso2
  /themes/cod-ab/lookup/{level}/{iso2}:
    parameters:
      - $ref: '#/components/parameters/levelParam'
      - $ref: '#/components/parameters/iso2Param'
    get:
      tags: [ "Lookup" ]
      responses:
        '200':
          description: >
            Retrieve place names and Pcodes based on level and country Pcode
            (i.e. BF for Burkina Faso) If no levels are entered, all places are
            returned. If no version is specified, the current version is
            returned.
            Returns: Names and Pcodes
          content:
            application/json:
              # TODO: Create specific schema
              schema:
                type: string

              example:
                [
                  {
                    "admin0Name_ref": "Null",
                    "admin0Pcode": "HN",
                    "admin0Name_local": "Honduras",
                    "admin1Name_ref": "Null",
                    "admin1Pcode": "HN11",
                    "admin1Name_local": "Islas de La Bahia",
                    "admin2Name_ref": "Null",
                    "admin2Pcode": "HN1102",
                    "admin2Name_local": "Guanaja",
                    "status": "OK"
                  },
                  {
                    "admin0Name_ref": "Null",
                    "admin0Pcode": "HN",
                    "admin0Name_local": "Honduras",
                    "admin1Name_ref": "Null",
                    "admin1Pcode": "HN11",
                    "admin1Name_local": "Islas de La Bahia",
                    "admin2Name_ref": "Null",
                    "admin2Pcode": "HN1103",
                    "admin2Name_local": "Jose Santos Guardiola",
                    "status": "OK"
                  }
                ]

components:
  schemas:
    LocationMetadataReply:
      # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-locations
      # title: |
      #   List available locations (with metadata about each such as preferred
      #   name, iso codes, etc.) and lists of themes available in each location
      #   Returns: location name, iso_3, themes.
      type: object
      required:
        - location_iso
        - location_name
        - Themes
      properties:
        location_iso:
          type: string
          minLength: 3
          maxLength: 3
        location_name:
          type: string
        Themes:
          type: array
          items:
            enum:
              - "Administrative Boundary"
              - "Population Statistics"
        status:
          type: string
          enum:
            - OK
            # TODO: ask when is not OK?
        total:
          type: number
  
    Error500GenericReply:
      type: object
      required:
        - $id
        - message
      properties:
        "$id":
          type: string
        message:
          type: string
      example:
        {
          "$id": "1",
          "message": "An error has occurred."
        }

  parameters:
    pCodePathParam:
      name: pCode
      in: path
      description: "P-code (Place Code) is (TODO: ADD SHORT DESCRIPTION)"
      required: true
      schema:
        type: string
      example: "HN01"

    # FIXME: the https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-locations-pCode
    #        says its a P-Code, but seems to be an ISO3 country code. We
    #        need to check this.
    pCodeNeedsFixPathParam:
      name: pCode
      in: path
      description: "(TODO: ADD SHORT DESCRIPTION)"
      required: true
      schema:
        type: string
      example: "SDN"
      # https://beta.itos.uga.edu/CODV2API/Help/Api/GET-api-v1-themes-cod-ab-locations-pCode-versions-current-format-level
      # example: "SYR"

    versionIdPathParam:
      name: versionId
      in: path
      description: "(TODO: ADD SHORT DESCRIPTION)"
      required: true
      schema:
        type: integer

    formatParam:
      name: format
      in: path
      description: |
        Examples: SHP, vectortiles, Geodatabase, Geoservice, XLSX, CSV, geoJSON

        - Note that shapefiles ("SHP" format) are downloaded for all
          levels (administrative boundary designations) since they are
          packaged that way. However Vector tiles,
        - NEW!!!! are downloaded for the respective level as they are
          available. For the list of available vector tiles, check out the
          github and search for the .mbtiles term or column in the
          spreadsheet: [service deployment status](https://github.com/UGA-ITOSHumanitarianGIS/mapservicedoc/blob/master/Data/AWSDeploymentURLlist.xlsx).

      required: true
      schema:
        type: string
        example: geoJSON
        enum:
          - SHP
          - vectortiles
          - Geodatabase
          - Geoservice
          - XLSX
          - CSV
          - geoJSON

    levelParam:
      name: level
      in: path
      description: |
        Example: 2
        For levels, check out the list of levels available for each COD country:
        at /themes/cod-ab/locations/SYR/versions/current
      required: true
      schema:
        type: string
        example: "2"
        enum:
          - "1"
          - "2"
          - "3"
          - "4" # TODO: check if 4 exists
          - "5" # TODO: check if 5 exists

    themeIdParam:
      name: themeId
      in: path
      description: |
        1 is Administrative Boundary.
        2 is Population Statistics
      required: true
      schema:
        type: string
        example: "2"
        enum:
          - "1" # Administrative Boundary.
          - "2" # Population Statistics

    wkidParam:
      name: wkid
      in: path
      description: |
        (TODO: add wkid short description)
      required: true
      schema:
        type: string
        example: "4326"

    latlongParam:
      name: latlong
      in: path
      description: |
        (TODO: add wkid short description)
      required: true
      schema:
        type: string
        example: "-2.33,12.34"

    iso2Param:
      name: iso2
      in: path
      description: |
        country iso2 (i.e. BF for Burkina Faso)
      required: true
      schema:
        type: string
        example: "HN"
